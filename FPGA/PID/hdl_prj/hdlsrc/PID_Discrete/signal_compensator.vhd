-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\PID_Discrete\signal_compensator.vhd
-- Created: 2022-04-11 15:19:35
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- U                             ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: signal_compensator
-- Source Path: PID_Discrete/signal_compensator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.signal_compensator_pkg.ALL;

ENTITY signal_compensator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        D                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        GAIN                              :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8_En3
        ce_out                            :   OUT   std_logic;
        U                                 :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En8
        );
END signal_compensator;


ARCHITECTURE rtl OF signal_compensator IS

  -- Constants
  CONSTANT alpha1_D_Lookup_Table_data     : vector_of_signed20(0 TO 11) := 
    (to_signed(16#00020#, 20), to_signed(16#00028#, 20), to_signed(16#00050#, 20), to_signed(16#000A0#, 20),
     to_signed(16#00140#, 20), to_signed(16#00280#, 20), to_signed(16#00500#, 20), to_signed(16#00A00#, 20),
     to_signed(16#01400#, 20), to_signed(16#02800#, 20), to_signed(16#05000#, 20), to_signed(16#0A000#, 20));  -- sfix20 [12]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL D_signed                         : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL D_1                              : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL D_dtc                            : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL GAIN_signed                      : signed(7 DOWNTO 0);  -- sfix8_En3
  SIGNAL alpha1_D_Lookup_Table_k          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alpha1_D_Lookup_Table_sub_temp   : signed(7 DOWNTO 0);  -- sfix8_En3
  SIGNAL alpha1_D_Lookup_Table_out1       : signed(19 DOWNTO 0);  -- sfix20_En8
  SIGNAL alpha1_D_Lookup_Table_out1_1     : signed(19 DOWNTO 0) := to_signed(16#00000#, 20);  -- sfix20_En8
  SIGNAL Divide_out1                      : signed(23 DOWNTO 0);  -- sfix24_En8

BEGIN
  D_signed <= signed(D);

  enb <= clk_enable;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      D_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        D_1 <= D_signed;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  D_dtc <= resize(D_1, 33);

  GAIN_signed <= signed(GAIN);

  alpha1_D_Lookup_Table_sub_temp <= GAIN_signed - to_signed(16#08#, 8);
  
  alpha1_D_Lookup_Table_k <= to_unsigned(16#0#, 4) WHEN GAIN_signed <= to_signed(16#08#, 8) ELSE
      to_unsigned(16#B#, 4) WHEN GAIN_signed >= to_signed(16#60#, 8) ELSE
      unsigned(alpha1_D_Lookup_Table_sub_temp(6 DOWNTO 3));
  alpha1_D_Lookup_Table_out1 <= alpha1_D_Lookup_Table_data(to_integer(alpha1_D_Lookup_Table_k));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table_out1_1 <= alpha1_D_Lookup_Table_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Divide_output : PROCESS (D_dtc, alpha1_D_Lookup_Table_out1_1)
    VARIABLE c : signed(32 DOWNTO 0);
    VARIABLE div_temp : signed(32 DOWNTO 0);
  BEGIN
    div_temp := to_signed(0, 33);
    IF alpha1_D_Lookup_Table_out1_1 = to_signed(16#00000#, 20) THEN 
      IF D_dtc < to_signed(0, 33) THEN 
        c := signed'("100000000000000000000000000000000");
      ELSE 
        c := signed'("011111111111111111111111111111111");
      END IF;
    ELSE 
      div_temp := D_dtc / alpha1_D_Lookup_Table_out1_1;
      c := div_temp;
    END IF;
    IF (c(32) = '0') AND (c(31 DOWNTO 23) /= "000000000") THEN 
      Divide_out1 <= X"7FFFFF";
    ELSIF (c(32) = '1') AND (c(31 DOWNTO 23) /= "111111111") THEN 
      Divide_out1 <= X"800000";
    ELSE 
      Divide_out1 <= c(23 DOWNTO 0);
    END IF;
  END PROCESS Divide_output;


  U <= std_logic_vector(Divide_out1);

  ce_out <= clk_enable;

END rtl;

