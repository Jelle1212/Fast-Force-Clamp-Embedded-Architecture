-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\iir_filter_test\Discrete_PID_Controller.vhd
-- Created: 2022-05-02 14:05:10
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Discrete_PID_Controller
-- Source Path: iir_filter_test/PID/Discrete PID Controller
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Discrete_PID_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        u                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        P                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        I                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        D                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        N                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        y                                 :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20
        );
END Discrete_PID_Controller;


ARCHITECTURE rtl OF Discrete_PID_Controller IS

  -- Signals
  SIGNAL u_signed                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL P_signed                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL PProd_Out_mul_temp               : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Parallel_P_Gain_out1             : signed(31 DOWNTO 0);  -- int32
  SIGNAL I_signed                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL IProd_Out_mul_temp               : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL I_Gain_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Integrator_indtc                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL gain_mul_temp                    : signed(63 DOWNTO 0);  -- sfix64_En55
  SIGNAL Integrator_u_gain                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Integrator_u_dtc                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL Integrator_x_add                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL adder_add_temp                   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Integrator_y_add                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL Integrator_x_reg                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL adder_add_temp_1                 : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_stage2_add_temp              : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_stage2_cast                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum_op_stage1                    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL D_signed                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL DProd_Out_mul_temp               : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL D_Gain_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL N_signed                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL N_Gain_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Filter_indtc                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL gain_mul_temp_1                  : signed(63 DOWNTO 0);  -- sfix64_En54
  SIGNAL Filter_u_gain                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Filter_u_dtc                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Filter_x_reg                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL adder_add_temp_2                 : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Filter_u_add                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL SumD_sub_temp                    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Filter_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL NProd_Out_mul_temp               : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Sum_stage3_add_cast              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Sum_stage3_add_cast_1            : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_stage3_add_temp              : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_out1                         : signed(19 DOWNTO 0);  -- sfix20

BEGIN
  -- Feedback Features
  -- 
  -- Derivative
  -- 
  -- Integrator

  u_signed <= signed(u);

  P_signed <= signed(P);

  PProd_Out_mul_temp <= u_signed * P_signed;
  
  Parallel_P_Gain_out1 <= X"7FFFFFFF" WHEN (PProd_Out_mul_temp(63) = '0') AND (PProd_Out_mul_temp(62 DOWNTO 31) /= X"00000000") ELSE
      X"80000000" WHEN (PProd_Out_mul_temp(63) = '1') AND (PProd_Out_mul_temp(62 DOWNTO 31) /= X"FFFFFFFF") ELSE
      PProd_Out_mul_temp(31 DOWNTO 0);

  I_signed <= signed(I);

  IProd_Out_mul_temp <= u_signed * I_signed;
  
  I_Gain_out1 <= X"7FFFFFFF" WHEN (IProd_Out_mul_temp(63) = '0') AND (IProd_Out_mul_temp(62 DOWNTO 31) /= X"00000000") ELSE
      X"80000000" WHEN (IProd_Out_mul_temp(63) = '1') AND (IProd_Out_mul_temp(62 DOWNTO 31) /= X"FFFFFFFF") ELSE
      IProd_Out_mul_temp(31 DOWNTO 0);

  Integrator_indtc <= I_Gain_out1;

  gain_mul_temp <= to_signed(1801439851, 32) * Integrator_indtc;
  Integrator_u_gain <= resize(gain_mul_temp(63 DOWNTO 55), 32);

  Integrator_u_dtc <= Integrator_u_gain;

  adder_add_temp <= resize(Integrator_x_add, 33) + resize(Integrator_u_dtc, 33);
  
  Integrator_y_add <= X"7FFFFFFF" WHEN (adder_add_temp(32) = '0') AND (adder_add_temp(31) /= '0') ELSE
      X"80000000" WHEN (adder_add_temp(32) = '1') AND (adder_add_temp(31) /= '1') ELSE
      adder_add_temp(31 DOWNTO 0);

  Integrator_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integrator_x_reg <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integrator_x_reg <= Integrator_y_add;
      END IF;
    END IF;
  END PROCESS Integrator_reg_process;


  adder_add_temp_1 <= resize(Integrator_x_reg, 33) + resize(Integrator_u_dtc, 33);
  
  Integrator_x_add <= X"7FFFFFFF" WHEN (adder_add_temp_1(32) = '0') AND (adder_add_temp_1(31) /= '0') ELSE
      X"80000000" WHEN (adder_add_temp_1(32) = '1') AND (adder_add_temp_1(31) /= '1') ELSE
      adder_add_temp_1(31 DOWNTO 0);

  Sum_stage2_add_temp <= resize(Parallel_P_Gain_out1, 33) + resize(Integrator_x_add, 33);
  
  Sum_stage2_cast <= X"7FFFFFFF" WHEN (Sum_stage2_add_temp(32) = '0') AND (Sum_stage2_add_temp(31) /= '0') ELSE
      X"80000000" WHEN (Sum_stage2_add_temp(32) = '1') AND (Sum_stage2_add_temp(31) /= '1') ELSE
      Sum_stage2_add_temp(31 DOWNTO 0);
  Sum_op_stage1 <= resize(Sum_stage2_cast, 33);

  D_signed <= signed(D);

  DProd_Out_mul_temp <= u_signed * D_signed;
  
  D_Gain_out1 <= X"7FFFFFFF" WHEN (DProd_Out_mul_temp(63) = '0') AND (DProd_Out_mul_temp(62 DOWNTO 31) /= X"00000000") ELSE
      X"80000000" WHEN (DProd_Out_mul_temp(63) = '1') AND (DProd_Out_mul_temp(62 DOWNTO 31) /= X"FFFFFFFF") ELSE
      DProd_Out_mul_temp(31 DOWNTO 0);

  N_signed <= signed(N);

  Filter_indtc <= N_Gain_out1;

  gain_mul_temp_1 <= to_signed(1801439851, 32) * Filter_indtc;
  Filter_u_gain <= resize(gain_mul_temp_1(63 DOWNTO 54), 32);

  Filter_u_dtc <= Filter_u_gain;

  adder_add_temp_2 <= resize(Filter_x_reg, 33) + resize(Filter_u_dtc, 33);
  
  Filter_u_add <= X"7FFFFFFF" WHEN (adder_add_temp_2(32) = '0') AND (adder_add_temp_2(31) /= '0') ELSE
      X"80000000" WHEN (adder_add_temp_2(32) = '1') AND (adder_add_temp_2(31) /= '1') ELSE
      adder_add_temp_2(31 DOWNTO 0);

  Filter_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Filter_x_reg <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Filter_x_reg <= Filter_u_add;
      END IF;
    END IF;
  END PROCESS Filter_reg_process;


  SumD_sub_temp <= resize(D_Gain_out1, 33) - resize(Filter_x_reg, 33);
  
  Filter_out1 <= X"7FFFFFFF" WHEN (SumD_sub_temp(32) = '0') AND (SumD_sub_temp(31) /= '0') ELSE
      X"80000000" WHEN (SumD_sub_temp(32) = '1') AND (SumD_sub_temp(31) /= '1') ELSE
      SumD_sub_temp(31 DOWNTO 0);

  NProd_Out_mul_temp <= Filter_out1 * N_signed;
  
  N_Gain_out1 <= X"7FFFFFFF" WHEN (NProd_Out_mul_temp(63) = '0') AND (NProd_Out_mul_temp(62 DOWNTO 31) /= X"00000000") ELSE
      X"80000000" WHEN (NProd_Out_mul_temp(63) = '1') AND (NProd_Out_mul_temp(62 DOWNTO 31) /= X"FFFFFFFF") ELSE
      NProd_Out_mul_temp(31 DOWNTO 0);

  
  Sum_stage3_add_cast <= X"7FFFFFFF" WHEN (Sum_op_stage1(32) = '0') AND (Sum_op_stage1(31) /= '0') ELSE
      X"80000000" WHEN (Sum_op_stage1(32) = '1') AND (Sum_op_stage1(31) /= '1') ELSE
      Sum_op_stage1(31 DOWNTO 0);
  Sum_stage3_add_cast_1 <= resize(Sum_stage3_add_cast, 33);
  Sum_stage3_add_temp <= Sum_stage3_add_cast_1 + resize(N_Gain_out1, 33);
  
  Sum_out1 <= X"7FFFF" WHEN (Sum_stage3_add_temp(32) = '0') AND (Sum_stage3_add_temp(31 DOWNTO 19) /= "0000000000000") ELSE
      X"80000" WHEN (Sum_stage3_add_temp(32) = '1') AND (Sum_stage3_add_temp(31 DOWNTO 19) /= "1111111111111") ELSE
      Sum_stage3_add_temp(19 DOWNTO 0);

  y <= std_logic_vector(Sum_out1);

END rtl;

